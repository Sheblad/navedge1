name: Deploy Frontend to VPS

on:
  push:
    branches: [ main ]   # change if you deploy from a different branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Show repo contents (debug)
        run: ls -la

      - name: Setup Node 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Build
        run: |
          # Ensure a build script exists
          if npm run | grep -q " build"; then
            npm run build
          else
            echo "No build script in package.json"; exit 1
          fi

          # Detect the output folder
          if [ -d dist ]; then
            echo "OUTDIR=dist" >> $GITHUB_ENV
          elif [ -d build ]; then
            echo "OUTDIR=build" >> $GITHUB_ENV
          else
            echo "No dist/ or build/ directory found after build"; exit 1
          fi

      - name: Upload build to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: 185.241.151.219
          username: root
          password: Upwork123
          source: ${{ env.OUTDIR }}/*
          target: /opt/frontend-new/
          overwrite: true

      - name: Publish into nginx container
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: 185.241.151.219
          username: root
          password: Upwork123
          script: |
            set -e
            CONTAINER=navedge-frontend
            DEST=/usr/share/nginx/html
            TS=$(date +%F-%H%M)

            mkdir -p /opt/frontend-backups/$TS
            docker cp $CONTAINER:$DEST/. /opt/frontend-backups/$TS/ || true

            docker exec $CONTAINER sh -c "rm -rf $DEST/*"
            docker cp /opt/frontend-new/. $CONTAINER:$DEST/
            docker exec $CONTAINER sh -c "nginx -t && nginx -s reload || true"

